/*
** HFCL - HybridOS Foundation Class Library
**
** Copyright (C) 2018 Beijing FMSoft Technologies Co., Ltd.
**
** This file is part of HFCL.
**
** This program is free software: you can redistribute it and/or modify
** it under the terms of the GNU General Public License as published by
** the Free Software Foundation, either version 3 of the License, or
** (at your option) any later version.
**
** This program is distributed in the hope that it will be useful,
** but WITHOUT ANY WARRANTY; without even the implied warranty of
** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
** GNU General Public License for more details.
**
** You should have received a copy of the GNU General Public License
** along with this program.  If not, see <https://www.gnu.org/licenses/>.
*/

// NOTE
// This file is auto-generated by using 'make_css_properties.py'.
// Please take care when you modify this file mannually.

#ifndef HFCL_CSS_CSSDECLARED_INC_
#define HFCL_CSS_CSSDECLARED_INC_

    // Operators for property background-attachment
    bool setBackgroundAttachment(Uint32 value) {
        return Css::setProperty(PID_BACKGROUND_ATTACHMENT, value);
    }

    // Operators for property background-color
    bool setBackgroundColor(Uint32 value) {
        return Css::setProperty(PID_BACKGROUND_COLOR, value);
    }
    bool setBackgroundColor(Uint32 value, HTPointer data) {
        return Css::setProperty (PID_BACKGROUND_COLOR, value, data);
    }
    bool setBackgroundColor(Uint32 value, HTUint data) {
        return Css::setProperty (PID_BACKGROUND_COLOR, value, data);
    }

    // Operators for property background-image
    bool setBackgroundImage(Uint32 value) {
        return Css::setProperty(PID_BACKGROUND_IMAGE, value);
    }
    bool setBackgroundImage(Uint32 value, HTInt data) {
        return Css::setProperty (PID_BACKGROUND_IMAGE, value, data);
    }
    bool setBackgroundImage(Uint32 value, HTPointer data) {
        return Css::setProperty (PID_BACKGROUND_IMAGE, value, data);
    }

    // Operators for property background-position-x
    bool setBackgroundPositionX(Uint32 value) {
        return Css::setProperty(PID_BACKGROUND_POSITION_X, value);
    }
    bool setBackgroundPositionX(Uint32 value, HTReal data) {
        return Css::setProperty (PID_BACKGROUND_POSITION_X, value, data);
    }

    // Operators for property background-position-y
    bool setBackgroundPositionY(Uint32 value) {
        return Css::setProperty(PID_BACKGROUND_POSITION_Y, value);
    }
    bool setBackgroundPositionY(Uint32 value, HTReal data) {
        return Css::setProperty (PID_BACKGROUND_POSITION_Y, value, data);
    }

    // Operators for property background-repeat
    bool setBackgroundRepeat(Uint32 value) {
        return Css::setProperty(PID_BACKGROUND_REPEAT, value);
    }

    // Operators for property border-bottom-color
    bool setBorderBottomColor(Uint32 value) {
        return Css::setProperty(PID_BORDER_BOTTOM_COLOR, value);
    }
    bool setBorderBottomColor(Uint32 value, HTPointer data) {
        return Css::setProperty (PID_BORDER_BOTTOM_COLOR, value, data);
    }
    bool setBorderBottomColor(Uint32 value, HTUint data) {
        return Css::setProperty (PID_BORDER_BOTTOM_COLOR, value, data);
    }

    // Operators for property border-bottom-left-radius
    bool setBorderBottomLeftRadius(Uint32 value) {
        return Css::setProperty(PID_BORDER_BOTTOM_LEFT_RADIUS, value);
    }
    bool setBorderBottomLeftRadius(Uint32 value, HTPointer data) {
        return Css::setProperty (PID_BORDER_BOTTOM_LEFT_RADIUS, value, data);
    }
    bool setBorderBottomLeftRadius(Uint32 value, HTReal data) {
        return Css::setProperty (PID_BORDER_BOTTOM_LEFT_RADIUS, value, data);
    }

    // Operators for property border-bottom-right-radius
    bool setBorderBottomRightRadius(Uint32 value) {
        return Css::setProperty(PID_BORDER_BOTTOM_RIGHT_RADIUS, value);
    }
    bool setBorderBottomRightRadius(Uint32 value, HTPointer data) {
        return Css::setProperty (PID_BORDER_BOTTOM_RIGHT_RADIUS, value, data);
    }
    bool setBorderBottomRightRadius(Uint32 value, HTReal data) {
        return Css::setProperty (PID_BORDER_BOTTOM_RIGHT_RADIUS, value, data);
    }

    // Operators for property border-bottom-style
    bool setBorderBottomStyle(Uint32 value) {
        return Css::setProperty(PID_BORDER_BOTTOM_STYLE, value);
    }

    // Operators for property border-bottom-width
    bool setBorderBottomWidth(Uint32 value) {
        return Css::setProperty(PID_BORDER_BOTTOM_WIDTH, value);
    }
    bool setBorderBottomWidth(Uint32 value, HTReal data) {
        return Css::setProperty (PID_BORDER_BOTTOM_WIDTH, value, data);
    }

    // Operators for property border-left-color
    bool setBorderLeftColor(Uint32 value) {
        return Css::setProperty(PID_BORDER_LEFT_COLOR, value);
    }
    bool setBorderLeftColor(Uint32 value, HTPointer data) {
        return Css::setProperty (PID_BORDER_LEFT_COLOR, value, data);
    }
    bool setBorderLeftColor(Uint32 value, HTUint data) {
        return Css::setProperty (PID_BORDER_LEFT_COLOR, value, data);
    }

    // Operators for property border-left-style
    bool setBorderLeftStyle(Uint32 value) {
        return Css::setProperty(PID_BORDER_LEFT_STYLE, value);
    }

    // Operators for property border-left-width
    bool setBorderLeftWidth(Uint32 value) {
        return Css::setProperty(PID_BORDER_LEFT_WIDTH, value);
    }

    // Operators for property border-right-color
    bool setBorderRightColor(Uint32 value) {
        return Css::setProperty(PID_BORDER_RIGHT_COLOR, value);
    }
    bool setBorderRightColor(Uint32 value, HTPointer data) {
        return Css::setProperty (PID_BORDER_RIGHT_COLOR, value, data);
    }
    bool setBorderRightColor(Uint32 value, HTUint data) {
        return Css::setProperty (PID_BORDER_RIGHT_COLOR, value, data);
    }

    // Operators for property border-right-style
    bool setBorderRightStyle(Uint32 value) {
        return Css::setProperty(PID_BORDER_RIGHT_STYLE, value);
    }

    // Operators for property border-right-width
    bool setBorderRightWidth(Uint32 value) {
        return Css::setProperty(PID_BORDER_RIGHT_WIDTH, value);
    }
    bool setBorderRightWidth(Uint32 value, HTReal data) {
        return Css::setProperty (PID_BORDER_RIGHT_WIDTH, value, data);
    }

    // Operators for property border-top-color
    bool setBorderTopColor(Uint32 value) {
        return Css::setProperty(PID_BORDER_TOP_COLOR, value);
    }
    bool setBorderTopColor(Uint32 value, HTPointer data) {
        return Css::setProperty (PID_BORDER_TOP_COLOR, value, data);
    }
    bool setBorderTopColor(Uint32 value, HTUint data) {
        return Css::setProperty (PID_BORDER_TOP_COLOR, value, data);
    }

    // Operators for property border-top-left-radius
    bool setBorderTopLeftRadius(Uint32 value) {
        return Css::setProperty(PID_BORDER_TOP_LEFT_RADIUS, value);
    }
    bool setBorderTopLeftRadius(Uint32 value, HTPointer data) {
        return Css::setProperty (PID_BORDER_TOP_LEFT_RADIUS, value, data);
    }
    bool setBorderTopLeftRadius(Uint32 value, HTReal data) {
        return Css::setProperty (PID_BORDER_TOP_LEFT_RADIUS, value, data);
    }

    // Operators for property border-top-right-radius
    bool setBorderTopRightRadius(Uint32 value) {
        return Css::setProperty(PID_BORDER_TOP_RIGHT_RADIUS, value);
    }
    bool setBorderTopRightRadius(Uint32 value, HTPointer data) {
        return Css::setProperty (PID_BORDER_TOP_RIGHT_RADIUS, value, data);
    }
    bool setBorderTopRightRadius(Uint32 value, HTReal data) {
        return Css::setProperty (PID_BORDER_TOP_RIGHT_RADIUS, value, data);
    }

    // Operators for property border-top-style
    bool setBorderTopStyle(Uint32 value) {
        return Css::setProperty(PID_BORDER_TOP_STYLE, value);
    }

    // Operators for property border-top-width
    bool setBorderTopWidth(Uint32 value) {
        return Css::setProperty(PID_BORDER_TOP_WIDTH, value);
    }
    bool setBorderTopWidth(Uint32 value, HTReal data) {
        return Css::setProperty (PID_BORDER_TOP_WIDTH, value, data);
    }

    // Operators for property bottom
    bool setBottom(Uint32 value) {
        return Css::setProperty(PID_BOTTOM, value);
    }
    bool setBottom(Uint32 value, HTReal data) {
        return Css::setProperty (PID_BOTTOM, value, data);
    }

    // Operators for property clear
    bool setClear(Uint32 value) {
        return Css::setProperty(PID_CLEAR, value);
    }

    // Operators for property clip
    bool setClip(Uint32 value) {
        return Css::setProperty(PID_CLIP, value);
    }

    // Operators for property color
    bool setColor(Uint32 value) {
        return Css::setProperty(PID_COLOR, value);
    }
    bool setColor(Uint32 value, HTPointer data) {
        return Css::setProperty (PID_COLOR, value, data);
    }
    bool setColor(Uint32 value, HTUint data) {
        return Css::setProperty (PID_COLOR, value, data);
    }

    // Operators for property content
    bool setContent(Uint32 value) {
        return Css::setProperty(PID_CONTENT, value);
    }
    bool setContent(Uint32 value, HTUint data) {
        return Css::setProperty (PID_CONTENT, value, data);
    }
    bool setContent(Uint32 value, HTPointer data) {
        return Css::setProperty (PID_CONTENT, value, data);
    }

    // Operators for property counter-increment
    bool setCounterIncrement(Uint32 value) {
        return Css::setProperty(PID_COUNTER_INCREMENT, value);
    }
    bool setCounterIncrement(Uint32 value, HTUint data) {
        return Css::setProperty (PID_COUNTER_INCREMENT, value, data);
    }

    // Operators for property counter-reset
    bool setCounterReset(Uint32 value) {
        return Css::setProperty(PID_COUNTER_RESET, value);
    }
    bool setCounterReset(Uint32 value, HTUint data) {
        return Css::setProperty (PID_COUNTER_RESET, value, data);
    }

    // Operators for property cursor
    bool setCursor(Uint32 value) {
        return Css::setProperty(PID_CURSOR, value);
    }
    bool setCursor(Uint32 value, HTPointer data) {
        return Css::setProperty (PID_CURSOR, value, data);
    }

    // Operators for property direction
    bool setDirection(Uint32 value) {
        return Css::setProperty(PID_DIRECTION, value);
    }

    // Operators for property display
    bool setDisplay(Uint32 value) {
        return Css::setProperty(PID_DISPLAY, value);
    }

    // Operators for property float
    bool setFloat(Uint32 value) {
        return Css::setProperty(PID_FLOAT, value);
    }

    // Operators for property font
    bool setFont(Uint32 value) {
        return Css::setProperty(PID_FONT, value);
    }
    bool setFont(Uint32 value, HTPointer data) {
        return Css::setProperty (PID_FONT, value, data);
    }
    bool setFont(Uint32 value, HTInt data) {
        return Css::setProperty (PID_FONT, value, data);
    }

    // Operators for property font-family
    bool setFontFamily(Uint32 value) {
        return Css::setProperty(PID_FONT_FAMILY, value);
    }
    bool setFontFamily(Uint32 value, HTPointer data) {
        return Css::setProperty (PID_FONT_FAMILY, value, data);
    }

    // Operators for property font-size
    bool setFontSize(Uint32 value) {
        return Css::setProperty(PID_FONT_SIZE, value);
    }
    bool setFontSize(Uint32 value, HTReal data) {
        return Css::setProperty (PID_FONT_SIZE, value, data);
    }

    // Operators for property font-style
    bool setFontStyle(Uint32 value) {
        return Css::setProperty(PID_FONT_STYLE, value);
    }

    // Operators for property font-variant
    bool setFontVariant(Uint32 value) {
        return Css::setProperty(PID_FONT_VARIANT, value);
    }

    // Operators for property font-weight
    bool setFontWeight(Uint32 value) {
        return Css::setProperty(PID_FONT_WEIGHT, value);
    }

    // Operators for property height
    bool setHeight(Uint32 value) {
        return Css::setProperty(PID_HEIGHT, value);
    }
    bool setHeight(Uint32 value, HTReal data) {
        return Css::setProperty (PID_HEIGHT, value, data);
    }

    // Operators for property hvml-pseudo
    bool setHvmlPseudo(Uint32 value) {
        return Css::setProperty(PID_HVML_PSEUDO, value);
    }

    // Operators for property hyphens
    bool setHyphens(Uint32 value) {
        return Css::setProperty(PID_HYPHENS, value);
    }

    // Operators for property left
    bool setLeft(Uint32 value) {
        return Css::setProperty(PID_LEFT, value);
    }
    bool setLeft(Uint32 value, HTReal data) {
        return Css::setProperty (PID_LEFT, value, data);
    }

    // Operators for property letter-spacing
    bool setLetterSpacing(Uint32 value) {
        return Css::setProperty(PID_LETTER_SPACING, value);
    }
    bool setLetterSpacing(Uint32 value, HTReal data) {
        return Css::setProperty (PID_LETTER_SPACING, value, data);
    }

    // Operators for property line-break
    bool setLineBreak(Uint32 value) {
        return Css::setProperty(PID_LINE_BREAK, value);
    }

    // Operators for property line-height
    bool setLineHeight(Uint32 value) {
        return Css::setProperty(PID_LINE_HEIGHT, value);
    }
    bool setLineHeight(Uint32 value, HTReal data) {
        return Css::setProperty (PID_LINE_HEIGHT, value, data);
    }

    // Operators for property list-style-image
    bool setListStyleImage(Uint32 value) {
        return Css::setProperty(PID_LIST_STYLE_IMAGE, value);
    }
    bool setListStyleImage(Uint32 value, HTInt data) {
        return Css::setProperty (PID_LIST_STYLE_IMAGE, value, data);
    }
    bool setListStyleImage(Uint32 value, HTPointer data) {
        return Css::setProperty (PID_LIST_STYLE_IMAGE, value, data);
    }

    // Operators for property list-style-position
    bool setListStylePosition(Uint32 value) {
        return Css::setProperty(PID_LIST_STYLE_POSITION, value);
    }

    // Operators for property list-style-type
    bool setListStyleType(Uint32 value) {
        return Css::setProperty(PID_LIST_STYLE_TYPE, value);
    }

    // Operators for property margin-bottom
    bool setMarginBottom(Uint32 value) {
        return Css::setProperty(PID_MARGIN_BOTTOM, value);
    }
    bool setMarginBottom(Uint32 value, HTReal data) {
        return Css::setProperty (PID_MARGIN_BOTTOM, value, data);
    }

    // Operators for property margin-left
    bool setMarginLeft(Uint32 value) {
        return Css::setProperty(PID_MARGIN_LEFT, value);
    }
    bool setMarginLeft(Uint32 value, HTReal data) {
        return Css::setProperty (PID_MARGIN_LEFT, value, data);
    }

    // Operators for property margin-right
    bool setMarginRight(Uint32 value) {
        return Css::setProperty(PID_MARGIN_RIGHT, value);
    }
    bool setMarginRight(Uint32 value, HTReal data) {
        return Css::setProperty (PID_MARGIN_RIGHT, value, data);
    }

    // Operators for property margin-top
    bool setMarginTop(Uint32 value) {
        return Css::setProperty(PID_MARGIN_TOP, value);
    }
    bool setMarginTop(Uint32 value, HTReal data) {
        return Css::setProperty (PID_MARGIN_TOP, value, data);
    }

    // Operators for property max-height
    bool setMaxHeight(Uint32 value) {
        return Css::setProperty(PID_MAX_HEIGHT, value);
    }
    bool setMaxHeight(Uint32 value, HTReal data) {
        return Css::setProperty (PID_MAX_HEIGHT, value, data);
    }

    // Operators for property max-width
    bool setMaxWidth(Uint32 value) {
        return Css::setProperty(PID_MAX_WIDTH, value);
    }
    bool setMaxWidth(Uint32 value, HTReal data) {
        return Css::setProperty (PID_MAX_WIDTH, value, data);
    }

    // Operators for property min-height
    bool setMinHeight(Uint32 value) {
        return Css::setProperty(PID_MIN_HEIGHT, value);
    }
    bool setMinHeight(Uint32 value, HTReal data) {
        return Css::setProperty (PID_MIN_HEIGHT, value, data);
    }

    // Operators for property min-width
    bool setMinWidth(Uint32 value) {
        return Css::setProperty(PID_MIN_WIDTH, value);
    }
    bool setMinWidth(Uint32 value, HTReal data) {
        return Css::setProperty (PID_MIN_WIDTH, value, data);
    }

    // Operators for property opacity
    bool setOpacity(Uint32 value) {
        return Css::setProperty(PID_OPACITY, value);
    }
    bool setOpacity(Uint32 value, HTReal data) {
        return Css::setProperty (PID_OPACITY, value, data);
    }

    // Operators for property orphans
    bool setOrphans(Uint32 value) {
        return Css::setProperty(PID_ORPHANS, value);
    }
    bool setOrphans(Uint32 value, HTInt data) {
        return Css::setProperty (PID_ORPHANS, value, data);
    }

    // Operators for property outline-color
    bool setOutlineColor(Uint32 value) {
        return Css::setProperty(PID_OUTLINE_COLOR, value);
    }
    bool setOutlineColor(Uint32 value, HTPointer data) {
        return Css::setProperty (PID_OUTLINE_COLOR, value, data);
    }
    bool setOutlineColor(Uint32 value, HTUint data) {
        return Css::setProperty (PID_OUTLINE_COLOR, value, data);
    }

    // Operators for property outline-style
    bool setOutlineStyle(Uint32 value) {
        return Css::setProperty(PID_OUTLINE_STYLE, value);
    }

    // Operators for property outline-width
    bool setOutlineWidth(Uint32 value) {
        return Css::setProperty(PID_OUTLINE_WIDTH, value);
    }
    bool setOutlineWidth(Uint32 value, HTReal data) {
        return Css::setProperty (PID_OUTLINE_WIDTH, value, data);
    }

    // Operators for property overflow
    bool setOverflow(Uint32 value) {
        return Css::setProperty(PID_OVERFLOW, value);
    }

    // Operators for property overflow-wrap
    bool setOverflowWrap(Uint32 value) {
        return Css::setProperty(PID_OVERFLOW_WRAP, value);
    }

    // Operators for property padding-bottom
    bool setPaddingBottom(Uint32 value) {
        return Css::setProperty(PID_PADDING_BOTTOM, value);
    }
    bool setPaddingBottom(Uint32 value, HTReal data) {
        return Css::setProperty (PID_PADDING_BOTTOM, value, data);
    }

    // Operators for property padding-left
    bool setPaddingLeft(Uint32 value) {
        return Css::setProperty(PID_PADDING_LEFT, value);
    }
    bool setPaddingLeft(Uint32 value, HTReal data) {
        return Css::setProperty (PID_PADDING_LEFT, value, data);
    }

    // Operators for property padding-right
    bool setPaddingRight(Uint32 value) {
        return Css::setProperty(PID_PADDING_RIGHT, value);
    }
    bool setPaddingRight(Uint32 value, HTReal data) {
        return Css::setProperty (PID_PADDING_RIGHT, value, data);
    }

    // Operators for property padding-top
    bool setPaddingTop(Uint32 value) {
        return Css::setProperty(PID_PADDING_TOP, value);
    }
    bool setPaddingTop(Uint32 value, HTReal data) {
        return Css::setProperty (PID_PADDING_TOP, value, data);
    }

    // Operators for property page-break-after
    bool setPageBreakAfter(Uint32 value) {
        return Css::setProperty(PID_PAGE_BREAK_AFTER, value);
    }

    // Operators for property page-break-before
    bool setPageBreakBefore(Uint32 value) {
        return Css::setProperty(PID_PAGE_BREAK_BEFORE, value);
    }

    // Operators for property page-break-inside
    bool setPageBreakInside(Uint32 value) {
        return Css::setProperty(PID_PAGE_BREAK_INSIDE, value);
    }

    // Operators for property position
    bool setPosition(Uint32 value) {
        return Css::setProperty(PID_POSITION, value);
    }

    // Operators for property quotes
    bool setQuotes(Uint32 value) {
        return Css::setProperty(PID_QUOTES, value);
    }
    bool setQuotes(Uint32 value, HTPointer data) {
        return Css::setProperty (PID_QUOTES, value, data);
    }

    // Operators for property right
    bool setRight(Uint32 value) {
        return Css::setProperty(PID_RIGHT, value);
    }
    bool setRight(Uint32 value, HTReal data) {
        return Css::setProperty (PID_RIGHT, value, data);
    }

    // Operators for property tab-size
    bool setTabSize(Uint32 value) {
        return Css::setProperty(PID_TAB_SIZE, value);
    }
    bool setTabSize(Uint32 value, HTReal data) {
        return Css::setProperty (PID_TAB_SIZE, value, data);
    }

    // Operators for property text-align-all
    bool setTextAlignAll(Uint32 value) {
        return Css::setProperty(PID_TEXT_ALIGN_ALL, value);
    }

    // Operators for property text-align-last
    bool setTextAlignLast(Uint32 value) {
        return Css::setProperty(PID_TEXT_ALIGN_LAST, value);
    }

    // Operators for property text-decoration
    bool setTextDecoration(Uint32 value) {
        return Css::setProperty(PID_TEXT_DECORATION, value);
    }

    // Operators for property text-indent
    bool setTextIndent(Uint32 value) {
        return Css::setProperty(PID_TEXT_INDENT, value);
    }
    bool setTextIndent(Uint32 value, HTReal data) {
        return Css::setProperty (PID_TEXT_INDENT, value, data);
    }

    // Operators for property text-justify
    bool setTextJustify(Uint32 value) {
        return Css::setProperty(PID_TEXT_JUSTIFY, value);
    }

    // Operators for property text-transform
    bool setTextTransform(Uint32 value) {
        return Css::setProperty(PID_TEXT_TRANSFORM, value);
    }

    // Operators for property top
    bool setTop(Uint32 value) {
        return Css::setProperty(PID_TOP, value);
    }
    bool setTop(Uint32 value, HTReal data) {
        return Css::setProperty (PID_TOP, value, data);
    }

    // Operators for property unicode-bidi
    bool setUnicodeBidi(Uint32 value) {
        return Css::setProperty(PID_UNICODE_BIDI, value);
    }

    // Operators for property vertical-align
    bool setVerticalAlign(Uint32 value) {
        return Css::setProperty(PID_VERTICAL_ALIGN, value);
    }
    bool setVerticalAlign(Uint32 value, HTReal data) {
        return Css::setProperty (PID_VERTICAL_ALIGN, value, data);
    }

    // Operators for property visibility
    bool setVisibility(Uint32 value) {
        return Css::setProperty(PID_VISIBILITY, value);
    }

    // Operators for property white-space
    bool setWhiteSpace(Uint32 value) {
        return Css::setProperty(PID_WHITE_SPACE, value);
    }

    // Operators for property widows
    bool setWidows(Uint32 value) {
        return Css::setProperty(PID_WIDOWS, value);
    }
    bool setWidows(Uint32 value, HTInt data) {
        return Css::setProperty (PID_WIDOWS, value, data);
    }

    // Operators for property width
    bool setWidth(Uint32 value) {
        return Css::setProperty(PID_WIDTH, value);
    }
    bool setWidth(Uint32 value, HTReal data) {
        return Css::setProperty (PID_WIDTH, value, data);
    }

    // Operators for property word-spacing
    bool setWordSpacing(Uint32 value) {
        return Css::setProperty(PID_WORD_SPACING, value);
    }
    bool setWordSpacing(Uint32 value, HTReal data) {
        return Css::setProperty (PID_WORD_SPACING, value, data);
    }

    // Operators for property z-index
    bool setZIndex(Uint32 value) {
        return Css::setProperty(PID_Z_INDEX, value);
    }
    bool setZIndex(Uint32 value, HTInt data) {
        return Css::setProperty (PID_Z_INDEX, value, data);
    }

#endif /* HFCL_CSS_CSSDECLARED_INC_ */
